generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  freeTrialUsed Boolean   @default(false)
  credits       Int       @default(0)
  stripeCustomerId String? @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  searches      Search[]
  creditLedger  CreditLedger[]
}

model Search {
  id        String   @id @default(cuid())
  userId    String
  module    String   // "seo" | "gpt" | "brand" | etc.
  query     String
  result    Json?
  cost      Int      // 0 (free trial) or 1 (credit)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model CreditLedger {
  id        String   @id @default(cuid())
  userId    String
  delta     Int      // +20, +100, -1
  reason    String   // "purchase:20", "purchase:100", "analysis"
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
